// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  /// bcrypt hash
  password  String
  createdAt DateTime @default(now()) @map("created_at")

  tasks             Task[]
  pushSubscriptions PushSubscription[]

  @@map("users")
}

model PushSubscription {
  /// SHA-256 hash of the endpoint used as primary key
  endpointHash String   @id @map("endpoint_hash")
  endpoint     String
  p256dh       String
  auth         String
  expirationTime DateTime? @map("expiration_time")
  createdAt    DateTime @default(now()) @map("created_at")

  users User[]

  @@map("push_subscriptions")
}

model Task {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  /// [TaskParameters]
  parameters Json // Dynamic parameters (country, category, query, etc.)
  paramsHash String   @map("params_hash")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions TaskExecution[]

  @@map("tasks")
  @@unique([userId, paramsHash])
}

model TaskExecution {
  id           String          @id @default(uuid())
  taskId       String          @map("task_id")
  status       ExecutionStatus @default(PENDING)
  createdAt    DateTime        @default(now()) @map("created_at")
  startedAt    DateTime?       @map("started_at")
  completedAt  DateTime?       @map("completed_at")
  /// [NewsAnalysisResult]
  result       Json?
  errorMessage String?         @map("error_message")

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_executions")
}

enum ExecutionStatus {
  PENDING
  FETCHING
  ANALYZING
  COMPLETED
  FAILED
}
